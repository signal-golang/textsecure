package textsecure

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestDecrypt1(t *testing.T) {
  // https://tools.ietf.org/html/rfc8452#appendix-C

  plaintext_vec := []byte{
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
  }

  key_vec := []byte{
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
  }

  nonce_vec := []byte{
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  }

  ciphertext_vec := []byte{
    0x4a, 0x6a, 0x9d, 0xb4, 0xc8, 0xc6, 0x54, 0x92, 0x01, 0xb9, 0xed, 0xb5, 0x30, 0x06,
    0xcb, 0xa8, 0x21, 0xec, 0x9c, 0xf8, 0x50, 0x94, 0x8a, 0x7c, 0x86, 0xc6, 0x8a, 0xc7,
    0x53, 0x9d, 0x02, 0x7f, 0xe8, 0x19, 0xe6, 0x3a, 0xbc, 0xd0, 0x20, 0xb0, 0x06, 0xa9,
    0x76, 0x39, 0x76, 0x32, 0xeb, 0x5d,
  }

  // let calc_ciphertext = group_secret_params
  //     .encrypt_blob_aesgcmsiv(&key_vec, &nonce_vec, &plaintext_vec)
  //     .unwrap();
  //
  // assert!(&calc_ciphertext[..ciphertext_vec.len()] == &ciphertext_vec[..]);

  // nonce_plus_1 := append(nonce_vec,0x00)
  // calc_plaintext := decryptAvatar(append(ciphertext_vec, nonce_plus_1...), key_vec)
  // assert.Equal(t, plaintext_vec, calc_plaintext)

  calc_ciphertext, _ := encrypt(key_vec, plaintext_vec, nonce_vec)
  assert.Equal(t, ciphertext_vec, calc_ciphertext)

  plain, _ := decrypt(key_vec, calc_ciphertext, nonce_vec)
  assert.Equal(t, plaintext_vec, plain)
}

func TestDecrypt2(t *testing.T) {
        // https://tools.ietf.org/html/rfc8452#appendix-C

        plaintext_vec := []byte{
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x4d, 0xb9, 0x23, 0xdc, 0x79, 0x3e, 0xe6, 0x49, 0x7c, 0x76, 0xdc, 0xc0,
            0x3a, 0x98, 0xe1, 0x08,
        }

        key_vec := []byte{
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
        }

        nonce_vec := []byte{
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        }

        ciphertext_vec := []byte{
            0xf3, 0xf8, 0x0f, 0x2c, 0xf0, 0xcb, 0x2d, 0xd9, 0xc5, 0x98, 0x4f, 0xcd, 0xa9, 0x08,
            0x45, 0x6c, 0xc5, 0x37, 0x70, 0x3b, 0x5b, 0xa7, 0x03, 0x24, 0xa6, 0x79, 0x3a, 0x7b,
            0xf2, 0x18, 0xd3, 0xea, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        }

        calc_ciphertext, _ := encrypt(key_vec, plaintext_vec, nonce_vec)

        assert.Equal(t, ciphertext_vec, calc_ciphertext)

        calc_plaintext, _ := decrypt(key_vec, calc_ciphertext, nonce_vec)
        assert.Equal(t, plaintext_vec, calc_plaintext)
    }
